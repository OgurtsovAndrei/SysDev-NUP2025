@startuml Proto Design Class Diagram (MVC)

top to bottom direction
skinparam wrapWidth 200

' =================== FRONTEND VIEW LAYER ===================
package "Frontend View" #lightpink {
  class UserDashboardView {
    +renderUserProfile()
    +renderUsageData()
    +renderPackages()
    +renderBillingInfo()
  }

  class PackageView {
    +renderAvailablePackages()
    +renderPackageDetails()
    +renderOrderForm()
    +renderPromoCodeInput()
  }

  class SupportView {
    +renderTicketList()
    +renderTicketDetails()
    +renderCreateTicketForm()
    +renderChatInterface()
  }

  class FeedbackView {
    +renderFeedbackForm()
  }

  class LoginView {
    +renderLoginForm()
    +renderRegistrationForm()
    +renderForgotPasswordForm()
  }

  class HtmlPages {
    +index.html
    +dashboard.html
    +packages.html
    +support.html
    +feedback.html
    +login.html
    +register.html
    +profile.html
    +usage.html
  }
}

' =================== FRONTEND CONTROLLER LAYER ===================
package "Frontend Controller" #lightyellow {
  class UserController {
    +registerUser(userData)
    +loginUser(credentials)
    +logoutUser()
    +getUserProfile()
    +updateUserProfile(userData)
    +handleRegistrationForm()
    +handleLoginForm()
    +handleProfileUpdateForm()
  }

  class PackageController {
    +getPackageTypes()
    +getPackageOptions(typeId)
    +validatePromoCode(code)
    +orderPackage(packageData)
    +handlePackageSelection()
    +handlePromoCodeValidation()
    +handlePackageOrder()
  }

  class UsageController {
    +getUserUsageData()
    +refreshUsageData()
    +handleUsageDataFilters()
    +initializeUsagePage()
    +createPackageSection(pkg)
    +deletePackage(packageId)
  }

  class SupportController {
    +getSupportTickets()
    +createSupportTicket(ticketData)
    +updateSupportTicket(ticketId, data)
    +getChatHistory()
    +sendChatMessage(message)
    +handleTicketForm()
    +handleChatInput()
  }

  class FeedbackController {
    +submitFeedback(feedbackData)
    +handleFeedbackForm()
  }
}

' =================== FRONTEND CLIENT API MODEL LAYER ===================
package "Frontend Client Api model" #lightgreen {
  class ApiService {
    +get(endpoint, params)
    +post(endpoint, data)
    +put(endpoint, data)
    +delete(endpoint)
    +handleApiResponse(response)
    +getAuthHeaders()
  }

  class UserModel {
    +loginUser(email, password, rememberMe)
    +registerUser(fullName, email, password, confirmPassword, agreeTerms)
    +getUserProfile()
    +updateUserProfile(profileData)
    +getUserSupportTickets()
    +getUserNotifications()
    +markNotificationAsRead(notificationId)
  }

  class PackageModel {
    +getPackageTypes()
    +getPackageOptions(packageTypeId)
    +validatePromoCode(promoCode)
    +submitOrder(orderDetails)
  }

  class UsageModel {
    +getUserUsage()
    +deletePackage(packageId)
  }

  class FeedbackModel {
    +getFeedbackSummary()
    +submitFeedback(feedbackData)
  }

  class ChatModel {
    +getChatHistory()
    +sendChatMessage(messageText)
  }
}

' =================== REST API INTERFACE ===================
interface "REST API" as RestApi #orange {
  /users/**
  /packages/**
  /usage/**
  /tickets/**
  /chat/**
  /feedback/**
}

' =================== DATABASE LAYER ===================
package "Data Base" #pink {
  class Database {
    +connection: Connection
    +connect(): Boolean
    +disconnect(): void
    +executeQuery(query: String): ResultSet
    +executeUpdate(query: String): int
    +beginTransaction(): void
    +commitTransaction(): void
    +rollbackTransaction(): void
  }

  class Connection {
    +url: String
    +username: String
    +password: String
    +isConnected: Boolean
    +connect(): Boolean
    +disconnect(): void
  }

  ' Core database tables
  class UsersTable {
    +id: Column<String>
    +email: Column<String>
    +password: Column<String>
    +name: Column<String>
    +findById(id: String): ResultSet
    +findByEmail(email: String): ResultSet
    +insert(user: Map<String, Any>): int
    +update(id: String, user: Map<String, Any>): int
    +delete(id: String): int
  }

  class PackagesTable {
    +id: Column<String>
    +name: Column<String>
    +type: Column<String>
    +price: Column<Double>
    +features: Column<String>
    +isActive: Column<Boolean>
    +findById(id: String): ResultSet
    +findAll(): ResultSet
    +findByType(type: String): ResultSet
    +insert(pkg: Map<String, Any>): int
    +update(id: String, pkg: Map<String, Any>): int
    +delete(id: String): int
  }

  class UserPackagesTable {
    +id: Column<String>
    +userId: Column<String>
    +packageId: Column<String>
    +startDate: Column<Date>
    +endDate: Column<Date>
    +status: Column<String>
    +findById(id: String): ResultSet
    +findByUserId(userId: String): ResultSet
    +findByPackageId(packageId: String): ResultSet
    +insert(userPackage: Map<String, Any>): int
    +update(id: String, userPackage: Map<String, Any>): int
    +delete(id: String): int
  }
}

' =================== BACKEND MODEL LAYER ===================
package "Backend Model" #lightblue {
  ' Entity base interface
  interface Entity<T> {
    +companion object Factory<T>
  }

  ' Core entity interfaces
  interface User extends Entity {
    -id: String
    -email: String
    -password: String
    -name: String
    +getId(): String
    +getEmail(): String
    +getName(): String
  }

  interface Package extends Entity {
    -id: String
    -name: String
    -type: PackageType
    -price: Double
    -features: List<String>
    -isActive: Boolean
    +getId(): String
    +getName(): String
    +getType(): PackageType
    +getPrice(): Double
    +getFeatures(): List<String>
    +isActive(): Boolean
  }

  interface UserPackage extends Entity {
    -id: String
    -userId: String
    -packageId: String
    -startDate: Date
    -endDate: Date
    -status: PackageStatus
    +getId(): String
    +getUserId(): String
    +getPackageId(): String
    +getStartDate(): Date
    +getEndDate(): Date
    +getStatus(): PackageStatus
  }

  ' Core enumerations
  enum PackageType {
    BASIC
    STANDARD
    PREMIUM
    ENTERPRISE
  }

  enum PackageStatus {
    ACTIVE
    SUSPENDED
    CANCELLED
    EXPIRED
  }
}

' =================== BACKEND CONTROLLER LAYER ===================
package "Backend Controller" #lightcyan {
  ' Base interfaces
  interface Repository {
    +database: Database
    +initializeMockData(): void
  }

  interface RouteConfigurable {
    +configure(route: Route): void
  }

  interface PluginConfigurable {
    +configure(application: Application): void
  }

  ' Base abstract classes
  abstract class RouteConfigBase implements RouteConfigurable {
    #SAFE_DELIMITER: String
    +configure(route: Route): void
    #{abstract} Route.configureRoutes(): void
  }

  abstract class PluginConfigBase implements PluginConfigurable {
    +configure(application: Application): void
    #{abstract} Application.configurePlugin(): void
  }

  ' Repository implementations
  class UserRepository implements Repository {
    +database: Database
    +initializeMockData(): void
    +getUserById(id: String): User?
    +getUserByEmail(email: String): User?
    +createUser(user: User): User
    +updateUser(user: User): Boolean
    +getUserPackages(userId: String): List<Package>
    +toUserModel(user: User): UserModel
  }

  class PackageRepository implements Repository {
    +database: Database
    +initializeMockData(): void
    +getAllPackageTypes(): List<PackageTypeModel>
    +getPackageOptions(packageTypeId: String): PackageOptionsResponse?
    +validatePromoCode(code: String): PromoCode?
    +orderPackage(userId: String, request: OrderRequest): Boolean
    +toPackageTypeModel(packageType: PackageType): PackageTypeModel
    +toPackageOptionModel(option: PackageOption): Option
  }

  class UsageRepository implements Repository {
    +database: Database
    +initializeMockData(): void
    +getUserUsageData(userId: String): UsageDataResponse
    +deletePackage(userId: String, packageId: String): Boolean
  }

  class SupportTicketRepository implements Repository {
    +database: Database
    +initializeMockData(): void
    +getUserTickets(userId: String): List<SupportTicket>
    +getTicketById(ticketId: String): SupportTicket?
    +createTicket(ticket: SupportTicket): SupportTicket
    +updateTicket(ticket: SupportTicket): Boolean
    +toSupportTicketModel(ticket: SupportTicket): SupportTicketModel
  }

  class ChatMessageRepository implements Repository {
    +database: Database
    +initializeMockData(): void
    +getTicketChatHistory(ticketId: String): List<ChatMessage>
    +sendChatMessage(message: ChatMessage): ChatMessage
    +toChatMessageModel(message: ChatMessage): ChatMessageModel
  }

  class FeedbackRepository implements Repository {
    +database: Database
    +initializeMockData(): void
    +submitFeedback(feedback: Feedback): Feedback
    +getFeedbackById(feedbackId: String): Feedback?
    +getUserFeedback(userId: String): List<Feedback>
    +toFeedbackEntryModel(feedback: Feedback): FeedbackEntry
  }

  class PromoCodeRepository implements Repository {
    +database: Database
    +initializeMockData(): void
    +getPromoCodeByCode(code: String): PromoCode?
    +toPromoCodeModel(promoCode: PromoCode): PromoCodeModel
  }

  class NotificationRepository implements Repository {
    +database: Database
    +initializeMockData(): void
    +getUserNotifications(userId: String): List<Notification>
    +markNotificationAsRead(notificationId: String): Boolean
    +toNotificationModel(notification: Notification): NotificationModel
  }

  ' Route implementations
  class AuthRoutes extends RouteConfigBase {
    -userRepository: UserRepository
    #Route.configureRoutes(): void
  }

  class UserProfileRoutes extends RouteConfigBase {
    -userRepository: UserRepository
    #Route.configureRoutes(): void
  }

  class PackagesRoutes extends RouteConfigBase {
    -packageRepository: PackageRepository
    #Route.configureRoutes(): void
  }

  class UsageRoutes extends RouteConfigBase {
    -usageRepository: UsageRepository
    #Route.configureRoutes(): void
  }

  class ChatRoutes extends RouteConfigBase {
    -chatMessageRepository: ChatMessageRepository
    #Route.configureRoutes(): void
  }

  class FeedbackRoutes extends RouteConfigBase {
    -feedbackRepository: FeedbackRepository
    #Route.configureRoutes(): void
  }

  class OtherUserDataRoutes extends RouteConfigBase {
    -notificationRepository: NotificationRepository
    #Route.configureRoutes(): void
  }

  ' Plugin configurations
  class RoutingConfig extends PluginConfigBase {
    -routes: List<RouteConfigurable>
    #Application.configurePlugin(): void
  }

  class SerializationConfig extends PluginConfigBase {
    #Application.configurePlugin(): void
  }

  class CorsConfig extends PluginConfigBase {
    #Application.configurePlugin(): void
  }

  class CallLoggingConfig extends PluginConfigBase {
    #Application.configurePlugin(): void
  }

  class StatusPagesConfig extends PluginConfigBase {
    #Application.configurePlugin(): void
  }

  ' Main application server
  class ApiServer {
    +port: Integer
    +host: String
    +plugins: List<PluginConfigurable>
    +start(): void
    +stop(): void
    +configurePlugins(): void
  }
}

' =================== FRONTEND RELATIONSHIPS ===================

' Frontend View to Frontend Controller relationships
UserDashboardView "1" --o "1" UserController : uses >
UserDashboardView "1" --o "1" UsageController : uses >
UserDashboardView "1" --o "1" PackageController : uses >

PackageView "1" --o "1" PackageController : uses >

SupportView "1" --o "1" SupportController : uses >

FeedbackView "1" --o "1" FeedbackController : uses >

LoginView "1" --o "1" UserController : uses >

' Frontend Controller to Frontend Client Api model relationships
UserController "1" --o "1" UserModel : uses >
PackageController "1" --o "1" PackageModel : uses >
UsageController "1" --o "1" UsageModel : uses >
SupportController "1" --o "1" UserModel : uses >
SupportController "1" --o "1" ChatModel : uses >
FeedbackController "1" --o "1" FeedbackModel : uses >

' Frontend Client Api model to API Service relationships
UserModel "1" --o "1" ApiService : uses >
PackageModel "1" --o "1" ApiService : uses >
UsageModel "1" --o "1" ApiService : uses >
FeedbackModel "1" --o "1" ApiService : uses >
ChatModel "1" --o "1" ApiService : uses >

' HTML Pages to View components relationships
HtmlPages "1" --o "1" UserDashboardView : rendered by >
HtmlPages "1" --o "1" PackageView : rendered by >
HtmlPages "1" --o "1" SupportView : rendered by >
HtmlPages "1" --o "1" FeedbackView : rendered by >
HtmlPages "1" --o "1" LoginView : rendered by >

' Frontend Client Api model data relationships
UserModel "1" --o "*" PackageModel : user has packages >
UserModel "1" --o "*" UsageModel : user has usage data >
UserModel "1" --o "*" FeedbackModel : user submits feedback >
UserModel "1" --o "*" ChatModel : user has chat history >
PackageModel "1" --o "*" UsageModel : package tracks usage >

' =================== BACKEND RELATIONSHIPS ===================

' Database relationships
Database "1" --o "1" Connection : uses >
Database "1" --o "1" UsersTable : contains >
Database "1" --o "1" PackagesTable : contains >
Database "1" --o "1" UserPackagesTable : contains >

' Database to Backend Model relationships
UsersTable "1" --o "*" User : persists >
PackagesTable "1" --o "*" Package : persists >
UserPackagesTable "1" --o "*" UserPackage : persists >

' Core Repository to Entity relationships
UserRepository "1" --o "*" User : manages >
PackageRepository "1" --o "*" Package : manages >
UsageRepository "1" --o "*" UserPackage : manages >

' Repository to Database relationships
UserRepository "1" --o "1" Database : uses >
PackageRepository "1" --o "1" Database : uses >
UsageRepository "1" --o "1" Database : uses >

' Core Route to Repository relationships
AuthRoutes "1" --o "1" UserRepository : uses >
PackagesRoutes "1" --o "1" PackageRepository : uses >
UsageRoutes "1" --o "1" UsageRepository : uses >

' Plugin to Route relationships
RoutingConfig "1" --o "*" RouteConfigurable : configures >

' ApiServer to Plugin relationships
ApiServer "1" --o "*" PluginConfigurable : uses >

' REST API to ApiServer relationship
RestApi "1" --o "1" ApiServer : exposes and handles >

' Core Entity inheritance relationships
User --|> Entity
Package --|> Entity
UserPackage --|> Entity

' Core Backend Model relationship notations
User "1" --o "*" UserPackage : subscribes to >
Package "1" --o "*" UserPackage : subscribed by >

' Core Backend Type enumerations
Package "1" -- "1" PackageType : has type >
UserPackage "1" -- "1" PackageStatus : has status >

' =================== FRONTEND-BACKEND CONNECTION ===================

' Frontend to Backend connection via REST API
ApiService "1" --o "1" RestApi : sends requests to >

@enduml
