@startuml "Telecom System Final Design Class Diagram"
top to bottom direction
skinparam wrapWidth 200

' =================== BACKEND PACKAGES ===================
package "Backend" {
  package "Models"  {
    ' =================== USER DOMAIN ===================
    package "User Domain" #FFEBCD{
      class User  {
        -id: String
        -name: String
        -email: String
        -password: String
        -phone: String
        -accountNumber: String
        -accountType: String
        -registrationDate: String
        -packages: List<UserPackage>
        -paymentMethod: String
        -billingAddress: Address
      }

      class Address  {
        -street: String
        -city: String
        -state: String
        -zipCode: String
        -country: String
      }

      class Notification  {
        -id: String
        -type: String
        -message: String
        -date: String
        -read: Boolean
      }

      interface User <<Entity>>  {
        +id: String
        +name: String
        +email: String
        +password: String
        +phone: String
        +accountNumber: String
        +accountType: String
        +registrationDate: LocalDate
        +paymentMethod: String
        +billingAddress: Address
      }

      interface Address <<Entity>>  {
        +id: Int
        +street: String
        +city: String
        +state: String
        +zipCode: String
        +country: String
      }
    }

    ' =================== PACKAGE DOMAIN ===================
    package "Package Domain" #FFEBCD{
      class UserPackage  {
        -id: String
        -type: String
        -name: String
        -plan: String
        -speed: String
        -router: String
        -addOns: List<String>
      }

      class PackageType  {
        -id: String
        -name: String
        -description: String
        -basePrice: Double
      }

      class Option  {
        -id: String
        -name: String
        -price: Double
      }

      class PackageOptionsResponse  {
        -speeds: List<Option>
        -routers: List<Option>
        -dataPlans: List<Option>
        -plans: List<Option>
        -addOns: List<Option>
      }

      class PromoCode  {
        -code: String
        -discount: Double
        -description: String
      }

      interface Package <<Entity>>  {
        +id: String
        +type: String
        +name: String
        +plan: String
        +speed: String
        +router: String
        +createdAt: Instant
        +addOns: List<String>
        +users: List<User>
      }
    }

    ' =================== USAGE DOMAIN ===================
    package "Usage Domain" #FFEBCD{
      class UsageDataResponse  {
        -currentBillingCycle: BillingCycle
        -previousBillingCycles: List<PreviousBillingCycle>
      }

      class BillingCycle  {
        -startDate: String
        -endDate: String
        -packages: Map<String, PackageUsage>
      }

      class PackageUsage  {
        -type: String
        -name: String
        -dataUsed: Double
        -dataTotal: Double
        -callMinutesUsed: Int
        -callMinutesTotal: String
        -smsUsed: Int
        -smsTotal: String
        -downloadSpeed: String
        -uploadSpeed: String
        -devices: Int
      }
    }

    ' =================== SUPPORT DOMAIN ===================
    package "Support Domain" #FFEBCD{
      class SupportTicket  {
        -id: String
        -subject: String
        -status: String
        -createdDate: String
        -lastUpdated: String
        -priority: String
        -resolution: String
      }

      class ChatMessage  {
        -type: String
        -text: String
        -time: String
      }

      interface SupportTicket <<Entity>>  {
        +id: String
        +user: User
        +subject: String
        +status: String
        +createdDate: LocalDate
        +lastUpdated: LocalDate
        +priority: String
        +resolution: String
      }
    }

    ' =================== FEEDBACK DOMAIN ===================
    package "Feedback Domain" #FFEBCD{
      class FeedbackEntry  {
        -id: String
        -rating: Int
        -topic: String
        -text: String
        -timestamp: String
        -user: String
      }

      class FeedbackSummary  {
        -averageRating: Double
        -totalReviews: Int
        -recentFeedback: List<FeedbackEntry>
      }
    }

  }

  package "Database"  {

    package "Tables" #lightblue {
      class Users <<Table>> {
        +id: Column<String>
        +name: Column<String>
        +email: Column<String>
        +password: Column<String>
        +phone: Column<String>
        +accountNumber: Column<String>
        +accountType: Column<String>
        +registrationDate: Column<LocalDate>
        +paymentMethod: Column<String>
        +billingAddressId: Column<Int>
      }

      class Addresses <<Table>> {
        +id: Column<Int>
        +street: Column<String>
        +city: Column<String>
        +state: Column<String>
        +zipCode: Column<String>
        +country: Column<String>
      }

      class Packages <<Table>> {
        +id: Column<String>
        +type: Column<String>
        +name: Column<String>
        +plan: Column<String>
        +speed: Column<String>
        +router: Column<String>
        +createdAt: Column<Instant>
      }

      class UserPackages <<Table>> {
        +userId: Column<String>
        +packageId: Column<String>
      }

      class PackageAddOns <<Table>> {
        +packageId: Column<String>
        +addOn: Column<String>
      }

      class Feedbacks <<Table>> {
        +id: Column<String>
        +rating: Column<Int>
        +topic: Column<String>
        +text: Column<String>
        +timestamp: Column<Instant>
        +userName: Column<String>
      }

      class SupportTickets <<Table>> {
        +id: Column<String>
        +userId: Column<String>
        +subject: Column<String>
        +status: Column<String>
        +createdDate: Column<LocalDate>
        +lastUpdated: Column<LocalDate>
        +priority: Column<String>
        +resolution: Column<String>
      }

      class UsageDataTable <<Table>> {
        +id: Column<Int>
        +userId: Column<String>
        +packageId: Column<String>
        +billingCycleStart: Column<LocalDate>
        +billingCycleEnd: Column<LocalDate>
        +dataUsed: Column<BigDecimal>
        +dataTotal: Column<BigDecimal>
        +callMinutesUsed: Column<Int>
        +callMinutesTotal: Column<String>
        +smsUsed: Column<Int>
        +smsTotal: Column<String>
        +downloadSpeed: Column<String>
        +uploadSpeed: Column<String>
        +devices: Column<Int>
      }

      class PackageOptions <<Table>> {
        +id: Column<Int>
        +packageTypeId: Column<String>
        +optionType: Column<String>
        +optionId: Column<String>
        +name: Column<String>
        +price: Column<BigDecimal>
      }
    }

    package "Repositories" #F0FFF0 {
      interface Repository {
        +database: Database
        +initializeMockData()
      }

      class UserRepository {
        -database: Database
        +findUserById(id: String): User
        +findUserByEmail(email: String): User
        +createUser(...): User
        +updateUser(...): Boolean
        +getUserPackages(userId: String): List<Package>
        +toModel(user: User): User
        +initializeMockData()
      }

      class FeedbackRepository {
        -database: Database
        +getFeedbackSummary(): FeedbackSummary
        +submitFeedback(request: SubmitFeedbackRequest)
        +initializeMockData()
      }

      class ChatMessageRepository {
        -database: Database
        +getChatHistory(userId: String): List<ChatMessage>
        +addMessage(userId: String, message: String, isFromUser: Boolean): ChatMessage
        +initializeMockData()
      }

      class NotificationRepository {
        -database: Database
        +getNotifications(userId: String): List<Notification>
        +markAsRead(notificationId: String): Boolean
        +createNotification(userId: String, type: String, message: String): Notification
        +initializeMockData()
      }

      class PackageRepository {
        -database: Database
        +getPackageTypes(): List<PackageType>
        +getPackageOptions(typeId: String): PackageOptionsResponse
        +createPackage(request: CreatePackageRequest): Package
        +initializeMockData()
      }

      class PromoCodeRepository {
        -database: Database
        +validatePromoCode(code: String): PromoCode
        +initializeMockData()
      }

      class SupportTicketRepository {
        -database: Database
        +getTickets(userId: String): List<SupportTicket>
        +createTicket(userId: String, subject: String, priority: String): SupportTicket
        +updateTicket(ticketId: String, status: String, resolution: String?): Boolean
        +initializeMockData()
      }

      class UsageRepository {
        -database: Database
        +getUserUsage(userId: String): UsageDataResponse
        +initializeMockData()
      }
    }

    class DatabaseFactory {
      -instance: Database
      +{static} getInstance(): Database
      -{static} init()
    }
  }

  package "Routes" #lightcyan {
    interface RouteConfigurable {
      +configure(route: Route)
    }

    abstract class RouteConfigBase {
      #SAFE_DELIMITER: String
      +configure(route: Route)
      #{abstract} Route.configureRoutes()
    }

    class AuthRoutes {
      +Route.configureRoutes()
    }

    class FeedbackRoutes {
      -feedbackRepository: FeedbackRepository
      +Route.configureRoutes()
    }

    class ChatRoutes {
      -chatMessageRepository: ChatMessageRepository
      +Route.configureRoutes()
    }

    class OtherUserDataRoutes {
      -userRepository: UserRepository
      -notificationRepository: NotificationRepository
      +Route.configureRoutes()
    }

    class PackagesRoutes {
      -packageRepository: PackageRepository
      -promoCodeRepository: PromoCodeRepository
      +Route.configureRoutes()
    }

    class UsageRoutes {
      -usageRepository: UsageRepository
      +Route.configureRoutes()
    }

    class UserProfileRoutes {
      -userRepository: UserRepository
      +Route.configureRoutes()
    }
  }

  package "Configs" #lightcyan {
    interface PluginConfigurable {
      +configure(application: Application)
    }

    abstract class PluginConfigBase {
      +configure(application: Application)
      #{abstract} Application.configurePlugin()
    }

    class CallLoggingConfig {
      +Application.configurePlugin()
    }

    class CorsConfig {
      +Application.configurePlugin()
    }

    class RoutingConfig {
      -routesConfigRegister: RoutesConfigRegister
      +Application.configurePlugin()
    }

    class SerializationConfig {
      +Application.configurePlugin()
    }

    class StatusPagesConfig {
      +Application.configurePlugin()
    }
  }
}

' =================== API ROUTES ===================
interface "API ROUTES" as ApiRoutes #orange {
  /users/**
  /packages/**
  /usage/**
  /tickets/**
  /chat/**
  /feedback/**
}

' =================== FRONTEND PACKAGES ===================
package "Frontend" {
  package "View" #lightpink {
    class UserDashboardView {
      +renderUserProfile()
      +renderUsageData()
      +renderPackages()
      +renderBillingInfo()
    }

    class PackageView {
      +renderAvailablePackages()
      +renderPackageDetails()
      +renderOrderForm()
      +renderPromoCodeInput()
    }

    class SupportView {
      +renderTicketList()
      +renderTicketDetails()
      +renderCreateTicketForm()
      +renderChatInterface()
    }

    class FeedbackView {
      +renderFeedbackForm()
      +renderThankYouPage()
    }

    class LoginView {
      +renderLoginForm()
      +renderRegistrationForm()
      +renderForgotPasswordForm()
    }

    class CommonComponents {
      +renderHeader()
      +renderFooter()
      +renderNavigation()
      +renderNotification()
      +renderLoading()
      +renderError()
    }
  }

  package "Controller" #lightyellow {
    class UserController {
      +registerUser(userData)
      +loginUser(credentials)
      +logoutUser()
      +getUserProfile()
      +updateUserProfile(userData)
      +handleRegistrationForm()
      +handleLoginForm()
      +handleProfileUpdateForm()
    }

    class PackageController {
      +getPackageTypes()
      +getPackageOptions(typeId)
      +validatePromoCode(code)
      +orderPackage(packageData)
      +handlePackageSelection()
      +handlePromoCodeValidation()
      +handlePackageOrder()
    }

    class UsageController {
      +getUserUsageData()
      +refreshUsageData()
      +handleUsageDataFilters()
      +initializeUsagePage()
      +createPackageSection(pkg)
      +deletePackage(packageId)
    }

    class SupportController {
      +getSupportTickets()
      +createSupportTicket(ticketData)
      +updateSupportTicket(ticketId, data)
      +getChatHistory()
      +sendChatMessage(message)
      +handleTicketForm()
      +handleChatInput()
    }

    class FeedbackController {
      +submitFeedback(feedbackData)
      +handleFeedbackForm()
    }
  }

  package "Model" #lightgreen {
    class ApiService {
      +get(endpoint, params)
      +post(endpoint, data)
      +put(endpoint, data)
      +delete(endpoint)
      +handleApiResponse(response)
      +getAuthHeaders()
    }

    class UserModel {
      +loginUser(email, password, rememberMe)
      +registerUser(fullName, email, password, confirmPassword, agreeTerms)
      +getUserProfile()
      +updateUserProfile(profileData)
      +getUserSupportTickets()
      +getUserNotifications()
      +markNotificationAsRead(notificationId)
    }

    class PackageModel {
      +getPackageTypes()
      +getPackageOptions(packageTypeId)
      +validatePromoCode(promoCode)
      +submitOrder(orderDetails)
    }

    class UsageModel {
      +getUserUsage()
      +deletePackage(packageId)
    }

    class FeedbackModel {
      +getFeedbackSummary()
      +submitFeedback(feedbackData)
    }

    class ChatModel {
      +getChatHistory()
      +sendChatMessage(messageText)
    }
  }
}

' =================== RELATIONSHIPS ===================

' Backend relationships
Repository <|-- UserRepository
Repository <|-- FeedbackRepository
Repository <|-- ChatMessageRepository
Repository <|-- NotificationRepository
Repository <|-- PackageRepository
Repository <|-- PromoCodeRepository
Repository <|-- SupportTicketRepository
Repository <|-- UsageRepository

RouteConfigurable <|-- RouteConfigBase
RouteConfigBase <|-- AuthRoutes
RouteConfigBase <|-- FeedbackRoutes
RouteConfigBase <|-- ChatRoutes
RouteConfigBase <|-- OtherUserDataRoutes
RouteConfigBase <|-- PackagesRoutes
RouteConfigBase <|-- UsageRoutes
RouteConfigBase <|-- UserProfileRoutes

PluginConfigurable <|-- PluginConfigBase
PluginConfigBase <|-- CallLoggingConfig
PluginConfigBase <|-- CorsConfig
PluginConfigBase <|-- RoutingConfig
PluginConfigBase <|-- SerializationConfig
PluginConfigBase <|-- StatusPagesConfig

UserRepository --> Users : uses for storage
UserRepository --> Addresses : uses for storage
UserRepository --> Packages : uses for storage
UserRepository --> UserPackages : uses for storage
UserRepository --> PackageAddOns : uses for storage
UserRepository ..> User : returns

FeedbackRepository --> Feedbacks : uses for storage
FeedbackRepository ..> FeedbackEntry : returns
FeedbackRepository ..> FeedbackSummary : returns

ChatMessageRepository --> ChatMessage : uses for storage
ChatMessageRepository ..> ChatMessage : returns

NotificationRepository --> Notification : uses for storage
NotificationRepository ..> Notification : returns

PackageRepository --> Packages : uses for storage
PackageRepository --> PackageType : uses for storage
PackageRepository --> PackageOptions : uses for storage
PackageRepository ..> PackageType : returns
PackageRepository ..> Option : returns
PackageRepository ..> PackageOptionsResponse : returns

PromoCodeRepository --> PromoCode : uses for storage
PromoCodeRepository ..> PromoCode : returns

SupportTicketRepository --> SupportTickets : uses for storage
SupportTicketRepository ..> SupportTicket : returns

UsageRepository --> UsageDataTable : uses for storage
UsageRepository ..> UsageDataResponse : returns
DatabaseFactory --> Repository : creates

' Frontend relationships
UserDashboardView --> UserController : uses
UserDashboardView --> UsageController : uses
UserDashboardView --> PackageController : uses

PackageView --> PackageController : uses
SupportView --> SupportController : uses
FeedbackView --> FeedbackController : uses
LoginView --> UserController : uses

UserController --> UserModel : uses
PackageController --> PackageModel : uses
UsageController --> UsageModel : uses
SupportController --> UserModel : uses
SupportController --> ChatModel : uses
FeedbackController --> FeedbackModel : uses

UserModel --> ApiService : uses
PackageModel --> ApiService : uses
UsageModel --> ApiService : uses
FeedbackModel --> ApiService : uses
ChatModel --> ApiService : uses

CommonComponents --* UserDashboardView : included in
CommonComponents --* PackageView : included in
CommonComponents --* SupportView : included in
CommonComponents --* FeedbackView : included in
CommonComponents --* LoginView : included in

' Cross-layer relationships
ApiService ..> ApiRoutes : sends requests to
ApiRoutes ..> AuthRoutes : routes to
ApiRoutes ..> FeedbackRoutes : routes to
ApiRoutes ..> ChatRoutes : routes to
ApiRoutes ..> OtherUserDataRoutes : routes to
ApiRoutes ..> PackagesRoutes : routes to
ApiRoutes ..> UsageRoutes : routes to
ApiRoutes ..> UserProfileRoutes : routes to

@enduml
