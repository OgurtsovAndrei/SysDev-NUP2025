@startuml Frontend Class Diagram (MVC)

package "View" {
  class UserDashboardView {
    +renderUserProfile()
    +renderUsageData()
    +renderPackages()
    +renderBillingInfo()
  }

  class PackageView {
    +renderAvailablePackages()
    +renderPackageDetails()
    +renderOrderForm()
    +renderPromoCodeInput()
  }

  class SupportView {
    +renderTicketList()
    +renderTicketDetails()
    +renderCreateTicketForm()
    +renderChatInterface()
  }

  class FeedbackView {
    +renderFeedbackForm()
    +renderThankYouPage()
  }

  class LoginView {
    +renderLoginForm()
    +renderRegistrationForm()
    +renderForgotPasswordForm()
  }

  class CommonComponents {
    +renderHeader()
    +renderFooter()
    +renderNavigation()
    +renderNotification()
    +renderLoading()
    +renderError()
  }
}

package "Front Controller" {
  class UserController {
    +registerUser(userData)
    +loginUser(credentials)
    +logoutUser()
    +getUserProfile()
    +updateUserProfile(userData)
    +handleRegistrationForm()
    +handleLoginForm()
    +handleProfileUpdateForm()
  }

  class PackageController {
    +getPackageTypes()
    +getPackageOptions(typeId)
    +validatePromoCode(code)
    +orderPackage(packageData)
    +handlePackageSelection()
    +handlePromoCodeValidation()
    +handlePackageOrder()
  }

  class UsageController {
    +getUserUsageData()
    +refreshUsageData()
    +handleUsageDataFilters()
    +initializeUsagePage()
    +createPackageSection(pkg)
    +deletePackage(packageId)
  }

  class SupportController {
    +getSupportTickets()
    +createSupportTicket(ticketData)
    +updateSupportTicket(ticketId, data)
    +getChatHistory()
    +sendChatMessage(message)
    +handleTicketForm()
    +handleChatInput()
  }

  class FeedbackController {
    +submitFeedback(feedbackData)
    +handleFeedbackForm()
  }
}

package "Model" {
  class ApiService {
    +get(endpoint, params)
    +post(endpoint, data)
    +put(endpoint, data)
    +delete(endpoint)
    +handleApiResponse(response)
    +getAuthHeaders()
  }

  class UserModel {
    +loginUser(email, password, rememberMe)
    +registerUser(fullName, email, password, confirmPassword, agreeTerms)
    +getUserProfile()
    +updateUserProfile(profileData)
    +getUserSupportTickets()
    +getUserNotifications()
    +markNotificationAsRead(notificationId)
  }

  class PackageModel {
    +getPackageTypes()
    +getPackageOptions(packageTypeId)
    +validatePromoCode(promoCode)
    +submitOrder(orderDetails)
  }

  class UsageModel {
    +getUserUsage()
    +deletePackage(packageId)
  }

  class FeedbackModel {
    +getFeedbackSummary()
    +submitFeedback(feedbackData)
  }

  class ChatModel {
    +getChatHistory()
    +sendChatMessage(messageText)
  }
}

package "Backend API" #lightgray {
  class BackendUserController #lightgray
  class BackendPackageController #lightgray
  class BackendUsageController #lightgray
  class BackendSupportController #lightgray
  class BackendChatController #lightgray
  class BackendFeedbackController #lightgray
}

' =================== RELATIONSHIPS ===================

' View to Front Controller relationships
UserDashboardView "1" --o "1" UserController : uses >
UserDashboardView "1" --o "1" UsageController : uses >
UserDashboardView "1" --o "1" PackageController : uses >

PackageView "1" --o "1" PackageController : uses >

SupportView "1" --o "1" SupportController : uses >

FeedbackView "1" --o "1" FeedbackController : uses >

LoginView "1" --o "1" UserController : uses >

' Front Controller to Model relationships
UserController "1" --o "1" UserModel : uses >
PackageController "1" --o "1" PackageModel : uses >
UsageController "1" --o "1" UsageModel : uses >
SupportController "1" --o "1" UserModel : uses >
SupportController "1" --o "1" ChatModel : uses >
FeedbackController "1" --o "1" FeedbackModel : uses >

' Model to API Service relationships
UserModel "1" --o "1" ApiService : uses >
PackageModel "1" --o "1" ApiService : uses >
UsageModel "1" --o "1" ApiService : uses >
FeedbackModel "1" --o "1" ApiService : uses >
ChatModel "1" --o "1" ApiService : uses >

' Model to Backend API relationships
ApiService "1" --o "*" BackendUserController : sends requests to >
ApiService "1" --o "*" BackendPackageController : sends requests to >
ApiService "1" --o "*" BackendUsageController : sends requests to >
ApiService "1" --o "*" BackendSupportController : sends requests to >
ApiService "1" --o "*" BackendChatController : sends requests to >
ApiService "1" --o "*" BackendFeedbackController : sends requests to >

' Common dependencies
CommonComponents "1" --* "1..*" UserDashboardView : included in >
CommonComponents "1" --* "1..*" PackageView : included in >
CommonComponents "1" --* "1..*" SupportView : included in >
CommonComponents "1" --* "1..*" FeedbackView : included in >
CommonComponents "1" --* "1..*" LoginView : included in >

' Model data relationships
UserModel "1" --o "*" PackageModel : user has packages >
UserModel "1" --o "*" UsageModel : user has usage data >
UserModel "1" --o "*" FeedbackModel : user submits feedback >
UserModel "1" --o "*" ChatModel : user has chat history >
PackageModel "1" --o "*" UsageModel : package tracks usage >

@enduml
