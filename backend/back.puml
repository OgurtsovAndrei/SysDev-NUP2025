@startuml Backend Class Diagram (MVC)

' =================== MODEL LAYER (DATABASE) ===================
package "Model" #lightblue {
  class User {
    -id: String
    -email: String
    -password: String
    -name: String
    -profile: UserProfile
    +getId(): String
    +getEmail(): String
    +getName(): String
    +getProfile(): UserProfile
    +setProfile(profile: UserProfile)
  }

  class UserProfile {
    -userId: String
    -address: String
    -phoneNumber: String
    -preferences: Map<String, Object>
    +getUserId(): String
    +getAddress(): String
    +getPhoneNumber(): String
    +getPreferences(): Map<String, Object>
  }

  class Package {
    -id: String
    -name: String
    -type: PackageType
    -price: Double
    -features: List<String>
    -isActive: Boolean
    +getId(): String
    +getName(): String
    +getType(): PackageType
    +getPrice(): Double
    +getFeatures(): List<String>
    +isActive(): Boolean
  }

  class UserPackage {
    -id: String
    -userId: String
    -packageId: String
    -startDate: Date
    -endDate: Date
    -status: PackageStatus
    +getId(): String
    +getUserId(): String
    +getPackageId(): String
    +getStartDate(): Date
    +getEndDate(): Date
    +getStatus(): PackageStatus
  }

  class UsageData {
    -id: String
    -userId: String
    -packageId: String
    -usageType: UsageType
    -amount: Double
    -date: Date
    +getId(): String
    +getUserId(): String
    +getPackageId(): String
    +getUsageType(): UsageType
    +getAmount(): Double
    +getDate(): Date
  }

  class SupportTicket {
    -id: String
    -userId: String
    -subject: String
    -description: String
    -status: TicketStatus
    -createdAt: Date
    -updatedAt: Date
    +getId(): String
    +getUserId(): String
    +getSubject(): String
    +getDescription(): String
    +getStatus(): TicketStatus
    +getCreatedAt(): Date
    +getUpdatedAt(): Date
  }

  class ChatMessage {
    -id: String
    -ticketId: String
    -senderId: String
    -message: String
    -timestamp: Date
    +getId(): String
    +getTicketId(): String
    +getSenderId(): String
    +getMessage(): String
    +getTimestamp(): Date
  }

  class Feedback {
    -id: String
    -userId: String
    -rating: Integer
    -comments: String
    -submittedDate: Date
    +getId(): String
    +getUserId(): String
    +getRating(): Integer
    +getComments(): String
    +getSubmittedDate(): Date
  }

  enum PackageType {
    BASIC
    STANDARD
    PREMIUM
    ENTERPRISE
  }

  enum PackageStatus {
    ACTIVE
    SUSPENDED
    CANCELLED
    EXPIRED
  }

  enum UsageType {
    DATA
    VOICE
    SMS
    ROAMING
  }

  enum TicketStatus {
    OPEN
    IN_PROGRESS
    RESOLVED
    CLOSED
  }
}

' =================== BACKEND CONTROLLER LAYER ===================
package "Backend Controller" #lightgreen {
  class ApiServer {
    +port: Integer
    +host: String
    +routes: Map<String, Object>
    +start(): void
    +stop(): void
    +handleRequest(request: Request): Response
    +registerRoute(path: String, method: String, handler: Function): void
    +getRoutesInfo(): List<RouteInfo>
    +getServerStatus(): ServerStatus
  }

  class BackendUserController {
    +register(request: UserRegistrationRequest): Response
    +login(request: LoginRequest): Response
    +logout(request: LogoutRequest): Response
    +getUserProfile(userId: String): Response
    +updateUserProfile(userId: String, data: UserProfileUpdateRequest): Response
  }

  class BackendPackageController {
    +getAllPackages(): Response
    +getPackageById(id: String): Response
    +getPackageTypes(): Response
    +getPackagesByType(typeId: String): Response
    +getUserPackages(userId: String): Response
    +orderPackage(request: PackageOrderRequest): Response
    +validatePromoCode(code: String): Response
  }

  class BackendUsageController {
    +getUserUsageData(userId: String): Response
    +getUserUsageByType(userId: String, type: UsageType): Response
    +getUserUsageByDateRange(userId: String, startDate: Date, endDate: Date): Response
  }

  class BackendSupportController {
    +getUserTickets(userId: String): Response
    +getTicketById(ticketId: String): Response
    +createTicket(request: TicketCreateRequest): Response
    +updateTicket(ticketId: String, request: TicketUpdateRequest): Response
  }

  class BackendChatController {
    +getTicketChatHistory(ticketId: String): Response
    +sendChatMessage(request: ChatMessageRequest): Response
  }

  class BackendFeedbackController {
    +submitFeedback(request: FeedbackRequest): Response
    +getFeedbackById(feedbackId: String): Response
    +getUserFeedback(userId: String): Response
  }
}

' =================== REST API INTERFACE ===================
interface "REST API" as RestApi #orange {
  /users/**
  /packages/**
  /usage/**
  /tickets/**
  /chat/**
  /feedback/**
}

' =================== RELATIONSHIPS ===================

' Backend Controller to Model relationships
BackendUserController "1" --o "1..*" User : manages >
BackendUserController "1" --o "1..*" UserProfile : manages >
BackendPackageController "1" --o "1..*" Package : manages >
BackendPackageController "1" --o "1..*" UserPackage : manages >
BackendUsageController "1" --o "1..*" UsageData : manages >
BackendSupportController "1" --o "1..*" SupportTicket : manages >
BackendChatController "1" --o "1..*" ChatMessage : manages >
BackendFeedbackController "1" --o "1..*" Feedback : manages >

' REST API to Backend Controller relationships
RestApi "1" --o "1" ApiServer : exposes and handles >
ApiServer "1" --o "1" BackendUserController : routes requests to >
ApiServer "1" --o "1" BackendPackageController : routes requests to >
ApiServer "1" --o "1" BackendUsageController : routes requests to >
ApiServer "1" --o "1" BackendSupportController : routes requests to >
ApiServer "1" --o "1" BackendChatController : routes requests to >
ApiServer "1" --o "1" BackendFeedbackController : routes requests to >

' Model relationship notations
User "1" --o "1" UserProfile : has >
User "1" --o "*" UserPackage : subscribes to >
Package "1" --o "*" UserPackage : subscribed by >
User "1" --o "*" UsageData : generates >
Package "1" --o "*" UsageData : tracked in >
User "1" --o "*" SupportTicket : creates >
SupportTicket "1" --o "*" ChatMessage : contains >
User "1" --o "*" Feedback : submits >

' Type enumerations
Package "1" -- "1" PackageType : has type >
UserPackage "1" -- "1" PackageStatus : has status >
UsageData "1" -- "1" UsageType : has type >
SupportTicket "1" -- "1" TicketStatus : has status >

@enduml